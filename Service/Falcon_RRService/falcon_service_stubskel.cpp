//This file is automatically generated. DO NOT EDIT!

#ifndef ROBOTRACONTEUR_USE_STDAFX
#include "falcon_service_stubskel.h"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#else
#include "stdafx.h"
#endif
namespace falcon_service
{
std::string falcon_serviceFactory::GetServiceName()
{
return "falcon_service";
}
std::string falcon_serviceFactory::DefString()
{
std::string out(
"\n"
"# Service to provide interface to the Novint Falcon Joystick\n"
"service falcon_service\n"
"\n"
"option version 0.5\n"
"\n"
"struct ControllerInput\n"
"field	int32	positionX\n"
"field	int32	positionY\n"
"field	int32	positionZ\n"
"field	int32	center_button\n"
"field	int32	left_button\n"
"field	int32	right_button\n"
"field	int32	top_button\n"
"end struct\n"
"\n"
"object Falcon\n"
"function void setForce(double[] force)\n"
"\n"
"property double[] position\n"
"property int32 button_status\n"
"property ControllerInput controller_input\n"
"property int32 deadzone_enabled\n"
"property int32 deadzone_feedback_enabled\n"
"property int32 deadzone_size\n"
"end object\n"
"\n"
);
return out;
}
RR_SHARED_PTR<RobotRaconteur::StructureStub> falcon_serviceFactory::FindStructureStub(std::string s)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(s);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (objecttype=="ControllerInput") return RobotRaconteur::rr_cast<RobotRaconteur::StructureStub>(RR_MAKE_SHARED<ControllerInput_stub>(GetNode()));
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> falcon_serviceFactory::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRStructure> structin)
{
std::string type=structin->RRType();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "falcon_service") return GetNode()->PackStructure(structin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->PackStructure(structin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::RRObject> falcon_serviceFactory::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> mstructin)
{
std::string type=mstructin->GetTypeString();boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "falcon_service") return GetNode()->UnpackStructure(mstructin);
RR_SHARED_PTR<RobotRaconteur::StructureStub> stub=FindStructureStub(type);
return stub->UnpackStructure(mstructin);
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceStub> falcon_serviceFactory::CreateStub(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::ClientContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "falcon_service") return GetNode()->GetServiceType(servicetype)->CreateStub(type,path,context);
if (objecttype=="Falcon") { RR_SHARED_PTR<Falcon_stub> o=(RR_MAKE_SHARED<Falcon_stub>(path,context)); o->RRInitStub(); return o; }
throw RobotRaconteur::ServiceException("Invalid structure stub type.");
}
RR_SHARED_PTR<RobotRaconteur::ServiceSkel> falcon_serviceFactory::CreateSkel(std::string type, std::string path, RR_SHARED_PTR<RobotRaconteur::RRObject> obj, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
boost::tuple<std::string,std::string> res=RobotRaconteur::SplitQualifiedName(type);
std::string servicetype=res.get<0>();
std::string objecttype=res.get<1>();
if (servicetype != "falcon_service") return GetNode()->GetServiceType(servicetype)->CreateSkel(type,path,obj,context);
if (objecttype=="Falcon") {RR_SHARED_PTR<Falcon_skel> o=RR_MAKE_SHARED<Falcon_skel>(); o->Init(path,obj,context); return o; }
throw RobotRaconteur::ServiceException("Invalid structure skel type.");
return RR_SHARED_PTR<RobotRaconteur::ServiceSkel>();
}
void falcon_serviceFactory::DownCastAndThrowException(RobotRaconteur::RobotRaconteurException& rr_exp)
{
std::string rr_type=rr_exp.Error;
if (rr_type.find('.')==std::string::npos)
{
	return;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "falcon_service") GetNode()->DownCastAndThrowException(rr_exp);
return;
}
RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> falcon_serviceFactory::DownCastException(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> rr_exp){
if (!rr_exp) return rr_exp;
std::string rr_type=rr_exp->Error;
if (rr_type.find('.')==std::string::npos)
{
	return rr_exp;
}
boost::tuple<std::string,std::string> rr_res=RobotRaconteur::SplitQualifiedName(rr_type);
if (rr_res.get<0>() != "falcon_service") return GetNode()->DownCastException(rr_exp);
return rr_exp;
}

RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> ControllerInput_stub::PackStructure(RR_SHARED_PTR<RobotRaconteur::RRObject> s)
{
RR_SHARED_PTR<ControllerInput > s2=RobotRaconteur::rr_cast<ControllerInput >(s);
std::vector<RR_SHARED_PTR<RobotRaconteur::MessageElement> > vret;
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("positionX",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->positionX))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("positionY",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->positionY))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("positionZ",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->positionZ))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("center_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->center_button))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("left_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->left_button))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("right_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->right_button))));
vret.push_back(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("top_button",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(s2->top_button))));
return RR_MAKE_SHARED<RobotRaconteur::MessageElementStructure>("falcon_service.ControllerInput",vret);
}
RR_SHARED_PTR<RobotRaconteur::RRStructure> ControllerInput_stub::UnpackStructure(RR_SHARED_PTR<RobotRaconteur::MessageElementStructure> m)
{
RR_SHARED_PTR<ControllerInput > ret=RR_MAKE_SHARED<ControllerInput >();
ret->positionX=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"positionX")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->positionY=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"positionY")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->positionZ=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"positionZ")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->center_button=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"center_button")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->left_button=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"left_button")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->right_button=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"right_button")->CastData<RobotRaconteur::RRArray<int32_t > >());
ret->top_button=RobotRaconteur::RRArrayToScalar<int32_t >(RobotRaconteur::MessageElement::FindElement(m->Elements,"top_button")->CastData<RobotRaconteur::RRArray<int32_t > >());
return ret;
}

Falcon_stub::Falcon_stub(const std::string &path, RR_SHARED_PTR<RobotRaconteur::ClientContext> c) : RobotRaconteur::ServiceStub(path,c){ }
void Falcon_stub::RRInitStub()
{
}

RR_SHARED_PTR<RobotRaconteur::RRArray<double > > Falcon_stub::get_position()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"position");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return me->CastData<RobotRaconteur::RRArray<double > >();
}
void Falcon_stub::set_position(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"position");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

int32_t Falcon_stub::get_button_status()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"button_status");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
void Falcon_stub::set_button_status(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"button_status");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

RR_SHARED_PTR<ControllerInput > Falcon_stub::get_controller_input()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"controller_input");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::rr_cast<ControllerInput >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
void Falcon_stub::set_controller_input(RR_SHARED_PTR<ControllerInput > value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"controller_input");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value)))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

int32_t Falcon_stub::get_deadzone_enabled()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"deadzone_enabled");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
void Falcon_stub::set_deadzone_enabled(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"deadzone_enabled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

int32_t Falcon_stub::get_deadzone_feedback_enabled()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"deadzone_feedback_enabled");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
void Falcon_stub::set_deadzone_feedback_enabled(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"deadzone_feedback_enabled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

int32_t Falcon_stub::get_deadzone_size()
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"deadzone_size");
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(m);
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=mr->FindElement("value");
return RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
void Falcon_stub::set_deadzone_size(int32_t value)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"deadzone_size");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=ProcessTransaction(req);
}

void Falcon_stub::setForce(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > force)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("force",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(force)));
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_ret=ProcessTransaction(rr_req);
}

void Falcon_stub::DispatchEvent(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Falcon_stub::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
void Falcon_stub::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry>Falcon_stub::CallbackCall(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
std::string ename=rr_m->MemberName;
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_CallbackCallRet, ename);
rr_mr->ServicePath=rr_m->ServicePath;
rr_mr->TransactionID=rr_m->TransactionID;
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

std::string Falcon_stub::RRType()
{
return "falcon_service.Falcon";
}
void Falcon_stub::RRClose()
{
ServiceStub::RRClose();
}

void Falcon_stub::async_get_position(boost::function<void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"position");
AsyncProcessTransaction(m,boost::bind(&Falcon_stub::rrend_get_position, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_get_position(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RRArray<double > > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=me->CastData<RobotRaconteur::RRArray<double > >();
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<RobotRaconteur::RRArray<double > >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_set_position(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"position");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
AsyncProcessTransaction(req,boost::bind(&Falcon_stub::rrend_set_position, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_set_position(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_get_button_status(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"button_status");
AsyncProcessTransaction(m,boost::bind(&Falcon_stub::rrend_get_button_status, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_get_button_status(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_set_button_status(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"button_status");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Falcon_stub::rrend_set_button_status, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_set_button_status(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_get_controller_input(boost::function<void (RR_SHARED_PTR<ControllerInput >,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"controller_input");
AsyncProcessTransaction(m,boost::bind(&Falcon_stub::rrend_get_controller_input, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_get_controller_input(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<ControllerInput > ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(RR_SHARED_PTR<ControllerInput >(),err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RR_SHARED_PTR<ControllerInput >(),RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
RR_SHARED_PTR<ControllerInput > rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::rr_cast<ControllerInput >(RRGetNode()->UnpackStructure(me->CastData<RobotRaconteur::MessageElementStructure>()));
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(RR_SHARED_PTR<ControllerInput >(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(RR_SHARED_PTR<ControllerInput >(),RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_set_controller_input(RR_SHARED_PTR<ControllerInput > value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"controller_input");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value)))));
AsyncProcessTransaction(req,boost::bind(&Falcon_stub::rrend_set_controller_input, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_set_controller_input(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_get_deadzone_enabled(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"deadzone_enabled");
AsyncProcessTransaction(m,boost::bind(&Falcon_stub::rrend_get_deadzone_enabled, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_get_deadzone_enabled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_set_deadzone_enabled(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"deadzone_enabled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Falcon_stub::rrend_set_deadzone_enabled, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_set_deadzone_enabled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_get_deadzone_feedback_enabled(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"deadzone_feedback_enabled");
AsyncProcessTransaction(m,boost::bind(&Falcon_stub::rrend_get_deadzone_feedback_enabled, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_get_deadzone_feedback_enabled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_set_deadzone_feedback_enabled(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"deadzone_feedback_enabled");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Falcon_stub::rrend_set_deadzone_feedback_enabled, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_set_deadzone_feedback_enabled(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_get_deadzone_size(boost::function<void (int32_t,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> m=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetReq,"deadzone_size");
AsyncProcessTransaction(m,boost::bind(&Falcon_stub::rrend_get_deadzone_size, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_get_deadzone_size(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (int32_t ,RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(0,err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
int32_t rr_ret;
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> me=m->FindElement("value");
rr_ret=RobotRaconteur::RRArrayToScalar<int32_t >(me->CastData<RobotRaconteur::RRArray<int32_t > >());
}
catch (RobotRaconteur::RobotRaconteurException& err)
{
handler(0,RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err));
return;
}
catch (std::exception& err)
{
handler(0,RR_MAKE_SHARED<RobotRaconteur::RobotRaconteurRemoteException>(std::string(typeid(err).name()),err.what()));
return;
}
handler(rr_ret, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_set_deadzone_size(int32_t value,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetReq,"deadzone_size");
req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
AsyncProcessTransaction(req,boost::bind(&Falcon_stub::rrend_set_deadzone_size, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}
void Falcon_stub::rrend_set_deadzone_size(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}
void Falcon_stub::async_setForce(RR_SHARED_PTR<RobotRaconteur::RRArray<double > > force,boost::function<void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > rr_handler, int32_t rr_timeout)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_req=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallReq,"setForce");
rr_req->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("force",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(force)));
AsyncProcessTransaction(rr_req,boost::bind(&Falcon_stub::rrend_setForce, RobotRaconteur::rr_cast<Falcon_stub>(shared_from_this()),_1,_2,rr_handler ),rr_timeout);
}

void Falcon_stub::rrend_setForce(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, boost::function< void (RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>) > handler)
{
if (err)
{
handler(err);
return;
}
if (m->Error != RobotRaconteur::MessageErrorType_None)
{
handler(RobotRaconteur::RobotRaconteurExceptionUtil::MessageEntryToException(m));
return;
}
handler(RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException>());
}

void Falcon_skel::Init(const std::string& path, RR_SHARED_PTR<RobotRaconteur::RRObject> object, RR_SHARED_PTR<RobotRaconteur::ServerContext> context)
{
uncastobj=object;
rr_InitPipeServersRun=false;
rr_InitWireServersRun=false;
ServiceSkel::Init(path,object,context);
}
RR_SHARED_PTR<falcon_service::Falcon > Falcon_skel::get_obj()
{
return RobotRaconteur::rr_cast<falcon_service::Falcon >(uncastobj);
}
RR_SHARED_PTR<falcon_service::async_Falcon > Falcon_skel::get_asyncobj()
{
return RR_DYNAMIC_POINTER_CAST<falcon_service::async_Falcon >(uncastobj);
}
void Falcon_skel::ReleaseCastObject() 
{
}
std::string Falcon_skel::GetObjectType()
{
return "falcon_service.Falcon";
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Falcon_skel::CallGetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertyGetRes,m->MemberName);
RR_SHARED_PTR<falcon_service::async_Falcon > async_obj=get_asyncobj();
if (m->MemberName == "position")
{
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_get_position(boost::bind(&falcon_service::Falcon_skel::rr_get_position,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=get_obj()->get_position();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value)));
return mr;
}
}
if (m->MemberName == "button_status")
{
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_get_button_status(boost::bind(&falcon_service::Falcon_skel::rr_get_button_status,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_button_status();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
return mr;
}
}
if (m->MemberName == "controller_input")
{
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_get_controller_input(boost::bind(&falcon_service::Falcon_skel::rr_get_controller_input,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
RR_SHARED_PTR<ControllerInput > value=get_obj()->get_controller_input();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value)))));
return mr;
}
}
if (m->MemberName == "deadzone_enabled")
{
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_get_deadzone_enabled(boost::bind(&falcon_service::Falcon_skel::rr_get_deadzone_enabled,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_deadzone_enabled();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
return mr;
}
}
if (m->MemberName == "deadzone_feedback_enabled")
{
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_get_deadzone_feedback_enabled(boost::bind(&falcon_service::Falcon_skel::rr_get_deadzone_feedback_enabled,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_deadzone_feedback_enabled();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
return mr;
}
}
if (m->MemberName == "deadzone_size")
{
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_get_deadzone_size(boost::bind(&falcon_service::Falcon_skel::rr_get_deadzone_size,wp,_1,_2,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
int32_t value=get_obj()->get_deadzone_size();
mr->AddElement(RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value))));
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Falcon_skel::CallSetProperty(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_PropertySetRes,m->MemberName);
RR_SHARED_PTR<falcon_service::async_Falcon > async_obj=get_asyncobj();
if (m->MemberName == "position")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value=m->FindElement("value")->CastData<RobotRaconteur::RRArray<double > >();
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_set_position(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_position(value);
return mr;
}
}
if (m->MemberName == "button_status")
{
int32_t value=RobotRaconteur::RRArrayToScalar<int32_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_set_button_status(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_button_status(value);
return mr;
}
}
if (m->MemberName == "controller_input")
{
RR_SHARED_PTR<ControllerInput > value=RobotRaconteur::rr_cast<ControllerInput >(RRGetNode()->UnpackStructure(m->FindElement("value")->CastData<RobotRaconteur::MessageElementStructure>()));
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_set_controller_input(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_controller_input(value);
return mr;
}
}
if (m->MemberName == "deadzone_enabled")
{
int32_t value=RobotRaconteur::RRArrayToScalar<int32_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_set_deadzone_enabled(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_deadzone_enabled(value);
return mr;
}
}
if (m->MemberName == "deadzone_feedback_enabled")
{
int32_t value=RobotRaconteur::RRArrayToScalar<int32_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_set_deadzone_feedback_enabled(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_deadzone_feedback_enabled(value);
return mr;
}
}
if (m->MemberName == "deadzone_size")
{
int32_t value=RobotRaconteur::RRArrayToScalar<int32_t >(m->FindElement("value")->CastData<RobotRaconteur::RRArray<int32_t > >());
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_set_deadzone_size(value,boost::bind(&RobotRaconteur::ServiceSkel::EndAsyncCallSetProperty,wp,_1,m,RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->set_deadzone_size(value);
return mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Falcon_skel::rr_get_position(RR_WEAK_PTR<falcon_service::Falcon_skel> skel,RR_SHARED_PTR<RobotRaconteur::RRArray<double > > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<falcon_service::Falcon_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(value));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Falcon_skel::rr_get_button_status(RR_WEAK_PTR<falcon_service::Falcon_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<falcon_service::Falcon_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Falcon_skel::rr_get_controller_input(RR_WEAK_PTR<falcon_service::Falcon_skel> skel,RR_SHARED_PTR<ControllerInput > value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<falcon_service::Falcon_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(skel1->RRGetNode()->PackStructure(RobotRaconteur::rr_cast<RobotRaconteur::RRStructure>(value))));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Falcon_skel::rr_get_deadzone_enabled(RR_WEAK_PTR<falcon_service::Falcon_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<falcon_service::Falcon_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Falcon_skel::rr_get_deadzone_feedback_enabled(RR_WEAK_PTR<falcon_service::Falcon_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<falcon_service::Falcon_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Falcon_skel::rr_get_deadzone_size(RR_WEAK_PTR<falcon_service::Falcon_skel> skel,int32_t value, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<falcon_service::Falcon_skel> skel1=skel.lock();
if (!skel1) throw std::runtime_error("skel release");
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("value",RobotRaconteur::rr_cast<RobotRaconteur::MessageElementData>(RobotRaconteur::ScalarToRRArray<int32_t >(value)));
EndAsyncCallGetProperty(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallGetProperty(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
RR_SHARED_PTR<RobotRaconteur::MessageEntry> Falcon_skel::CallFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_m)
{
RR_SHARED_PTR<RobotRaconteur::MessageEntry> rr_mr=RR_MAKE_SHARED<RobotRaconteur::MessageEntry>(RobotRaconteur::MessageEntryType_FunctionCallRes,rr_m->MemberName);
RR_SHARED_PTR<falcon_service::async_Falcon > async_obj=get_asyncobj();
if (rr_m->MemberName == "setForce")
{
RR_SHARED_PTR<RobotRaconteur::RRArray<double > > force =rr_m->FindElement("force")->CastData<RobotRaconteur::RRArray<double > >();
if (async_obj)
{
RR_WEAK_PTR<falcon_service::Falcon_skel> rr_wp=RobotRaconteur::rr_cast<falcon_service::Falcon_skel>(shared_from_this());
async_obj->async_setForce(force, boost::bind(&falcon_service::Falcon_skel::rr_setForce,rr_wp, _1, rr_m, RobotRaconteur::ServerEndpoint::GetCurrentEndpoint()));
return RR_SHARED_PTR<RobotRaconteur::MessageEntry>();
}
else
{
get_obj()->setForce(force);
rr_mr->AddElement("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
return rr_mr;
}
}
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Falcon_skel::rr_setForce(RR_WEAK_PTR<falcon_service::Falcon_skel> skel, RR_SHARED_PTR<RobotRaconteur::RobotRaconteurException> err, RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::ServerEndpoint> ep)
{
if(err)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),err,m, ep);
return;
}
try
{
RR_SHARED_PTR<RobotRaconteur::MessageElement> mr=RR_MAKE_SHARED<RobotRaconteur::MessageElement>("return",RobotRaconteur::ScalarToRRArray<int32_t>(0));
EndAsyncCallFunction(skel, mr, err, m,ep);
}
catch (RobotRaconteur::RobotRaconteurException& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RobotRaconteur::RobotRaconteurExceptionUtil::DownCastException(err2),m, ep);
}
catch (std::exception& err2)
{
EndAsyncCallFunction(skel,RR_SHARED_PTR<RobotRaconteur::MessageElement>(),RR_MAKE_SHARED<RobotRaconteur::DataTypeException>(err2.what()),m, ep);
}
}
void Falcon_skel::RegisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RR_SHARED_PTR<falcon_service::Falcon > obj=RobotRaconteur::rr_cast<falcon_service::Falcon >(rrobj1);
RobotRaconteur::ServiceSkel::RegisterEvents(rrobj1);
}

void Falcon_skel::UnregisterEvents(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
RobotRaconteur::ServiceSkel::UnregisterEvents(rrobj1);
}

RR_SHARED_PTR<RobotRaconteur::RRObject> Falcon_skel::GetSubObj(const std::string &name, const std::string &ind)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Falcon_skel::InitPipeServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitPipeServersRun) return;
rr_InitPipeServersRun=true;
RR_SHARED_PTR<falcon_service::Falcon > obj=RobotRaconteur::rr_cast<falcon_service::Falcon >(rrobj1);
}

void Falcon_skel::DispatchPipeMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Falcon_skel::CallPipeFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Falcon_skel::InitWireServers(RR_SHARED_PTR<RobotRaconteur::RRObject> rrobj1)
{
if (rr_InitWireServersRun) return;
rr_InitWireServersRun=true;
RR_SHARED_PTR<falcon_service::Falcon > obj=RobotRaconteur::rr_cast<falcon_service::Falcon >(rrobj1);
}

void Falcon_skel::DispatchWireMessage(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Falcon_skel::CallWireFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, uint32_t e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

void Falcon_skel::InitCallbackServers(RR_SHARED_PTR<RobotRaconteur::RRObject> o)
{
RR_SHARED_PTR<falcon_service::Falcon > obj=RobotRaconteur::rr_cast<falcon_service::Falcon >(o);
}
RR_SHARED_PTR<void> Falcon_skel::GetCallbackFunction(uint32_t endpoint, const std::string& membername)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}

RR_SHARED_PTR<RobotRaconteur::MessageEntry> Falcon_skel::CallMemoryFunction(RR_SHARED_PTR<RobotRaconteur::MessageEntry> m, RR_SHARED_PTR<RobotRaconteur::Endpoint> e)
{
throw RobotRaconteur::MemberNotFoundException("Member not found");
}
}

